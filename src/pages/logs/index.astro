---
import { getCollection, getEntry, render } from "astro:content";
import readingTime from "reading-time";
import BackAnchor from "@/components/ui/BackAnchor.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import LogLayout from "@/layouts/LogLayout.astro";

const logs = await getCollection("logs");
const logPreviews = await getCollection("logPreviews");

console.log(`Found ${logs.length} logs.`);

const previewBySlug = new Map(logPreviews.map((p) => [p.data.slug, p]));
const authorCache = new Map();

type Item = {
    log: (typeof logs)[number];
    author: Awaited<ReturnType<typeof getEntry>>;
    stats: ReturnType<typeof readingTime>;
    PreviewContent: any;
};

const validLogs = logs
    .filter((log) => log.data.slug && previewBySlug.has(log.data.slug))
    .sort((a, b) => {
        const tA = new Date(a.data.pubDate).getTime();
        const tB = new Date(b.data.pubDate).getTime();

        if (tA !== tB) return tB - tA;
        return a.data.title.localeCompare(b.data.title);
    });

const items: Item[] = (await Promise.all(
    validLogs.map(async (log) => {
        if (!log.data.slug) return null;
        const preview = previewBySlug.get(log.data.slug)!;

        const { Content: PreviewContent } = await render(preview);

        // Cache authors to avoid duplicate fetches
        const authorKey = `${log.data.author.collection}:${log.data.author.id}`;
        let author = authorCache.get(authorKey);
        if (!author) {
            author = await getEntry(
                log.data.author.collection,
                log.data.author.id
            );
            if (author) {
                authorCache.set(authorKey, author);
            }
        }

        if (!author) return null;

        const stats = readingTime(log.body ?? "");

        return { log, author, stats, PreviewContent };
    })
).then((results) => results.filter(Boolean))) as Item[];

const logBorderWidth = "1px";
---

<BaseLayout>
    <div class="prose-container">
        <BackAnchor href="/">Home</BackAnchor>
        <h1 class="py-4">Logs</h1>
        <div class="flex flex-col">
            <div class="border-b"></div>
            {
                items.map(({ log, author, stats, PreviewContent }) => (
                    <div class="py-2 border-b overflow-hidden">
                        <div class="card-fade-out h-[11rem] rounded-lg invisible-link link-button p-2">
                            <LogLayout log={log} author={author} stats={stats}>
                                <PreviewContent />
                            </LogLayout>

                            <a
                                href={`/logs/${log.data.slug}`}
                                class="absolute inset-0 z-10"
                                aria-label={`Read ${log.data.title}`}
                            />
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
</BaseLayout>

<style define:vars={{ logBorderWidth }}>
    .border-b {
        border-bottom-width: var(--logBorderWidth);
    }
</style>
