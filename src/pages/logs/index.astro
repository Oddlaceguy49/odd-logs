---
import { getCollection, getEntry, render } from "astro:content";
import { ChevronLeft } from "@lucide/svelte";
import readingTime from "reading-time";
import BaseLayout from "@/layouts/BaseLayout.astro";
import LogLayout from "@/layouts/LogLayout.astro";
import Button from "$lib/components/ui/button/button.svelte";

const logs = await getCollection("logs");
if (!logs) {
    throw new Error(`Logs not found`);
}

console.log(`Found ${logs.length} logs.`);

const previewCache = new Map();

const logPreviews = await getCollection("logPreviews");
if (!logPreviews) {
    throw new Error(`LogPreviews not found`);
}

const previewBySlug = new Map(logPreviews.map((p) => [p.data.slug, p]));

type Item = {
    log: (typeof logs)[number];
    author: Awaited<ReturnType<typeof getEntry>>;
    stats: ReturnType<typeof readingTime>;
    PreviewContent: any;
};

const items: Item[] = (
    await Promise.all(
        logs.map(async (log) => {
            if (!log.data.slug) return null;
            const preview = previewBySlug.get(log.data.slug);
            if (!preview) return null;

            let rendered = previewCache.get(preview.id);
            if (!rendered) {
                rendered = await render(preview);
                previewCache.set(preview.id, rendered);
            }
            const { Content: PreviewContent } = rendered;

            const author = await getEntry(
                log.data.author.collection,
                log.data.author.id
            );
            if (!author) return null;

            const stats = readingTime(log.body ?? "");

            return { log, author, stats, PreviewContent };
        })
    )
).filter(Boolean) as Item[];

// const { Content, headings } = await render(log);

// const author = await getEntry(logData.author.collection, logData.author.id);
// if (!author) {
//     throw new Error(`Author not found for slug: ${logData.author.id}`);
// }
// const authorData = author.data;

// const stats = readingTime(log.body ?? "");

const logBorderWidth = "1px";
---

<BaseLayout>
    <div class="prose-container">
        <Button asChild class="py-2" variant="ghost" href="/"
            ><div class="inline-flex"><ChevronLeft />HOME</div></Button
        >
        <h1 class="py-4">Logs</h1>
        <div class="flex flex-col">
            <div class="border-b"></div>
            {
                items.map(({ log, author, stats, PreviewContent }) => (
                    <div class="py-2 border-b">
                        <a href={`/logs/${log.data.slug}`} class="link-button">
                            <div class="card-fade-out p-4 h-[11rem] link-button rounded-lg">
                                <LogLayout
                                    log={log}
                                    author={author}
                                    stats={stats}
                                >
                                    <PreviewContent />
                                </LogLayout>
                            </div>
                        </a>
                    </div>
                ))
            }
        </div>
    </div>
</BaseLayout>

<style define:vars={{ logBorderWidth }}>
    .border-b {
        border-bottom-width: var(--logBorderWidth);
    }
</style>
